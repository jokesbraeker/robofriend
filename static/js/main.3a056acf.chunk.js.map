{"version":3,"sources":["Componet/Robot.js","Componet/Cards.js","Componet/Search.js","Componet/Scroll.js","Componet/ErrorBoundry.js","Container/App.js","serviceWorker.js","index.js"],"names":["Robot","id","name","email","className","alt","src","Cards","robot","map","user","i","key","Search","searchFeild","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","borderColor","children","ErrorBoundry","state","hasError","this","setState","Component","App","onSerachChange","event","SearchFeild","target","value","fetch","then","response","json","users","FilterRobot","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0OAiBeA,EAfH,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,GAAGC,EAAc,EAAdA,KAAKC,EAAS,EAATA,MAClB,OACI,yBAAKC,UAAU,kDACX,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BL,EAA1B,iBAEpB,6BACC,4BAAKC,GACL,2BAAIC,MCgBFI,EAtBH,SAAC,GAAY,IAAXC,EAAU,EAAVA,MAIV,OACI,6BAEQA,EAAMC,KAAI,SAACC,EAAKC,GACZ,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLV,GAAIO,EAAMG,GAAGV,GACbC,KAAMM,EAAMG,GAAGT,KACfC,MAAOK,EAAMG,GAAGR,aCF7BU,EAZF,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aACvB,OACI,yBAAKX,UAAU,OACX,2BAAOY,KAAK,SACRC,YAAY,oBACZb,UAAU,wBACVc,SAAUH,MCGXI,G,MATF,SAACC,GAEV,OACI,yBAAKC,MAAO,CAACC,SAAS,SAASC,OAAO,YAAYC,YAAY,eACzDJ,EAAMK,YCcJC,E,kDAjBX,WAAYN,GAAO,IAAD,8BACd,gBACKO,MAAM,CACPC,UAAS,GAHC,E,gEAQdC,KAAKC,SAAS,CAACF,UAAU,M,+BAGzB,OAAGC,KAAKF,MAAMC,SACH,2DAEJC,KAAKT,MAAMK,a,GAfCM,aCqDZC,E,kDA3CX,aAAc,IAAD,8BACT,gBAgBJC,eAAe,SAACC,GACZ,EAAKJ,SAAS,CAACK,YAAYD,EAAME,OAAOC,SAhBxC,EAAKV,MAAM,CACPnB,MAAM,GACN2B,YAAY,IAJP,E,gEAQO,IAAD,OACfG,MAAM,8CACLC,MAAK,SAAAC,GACJ,OAAQA,EAASC,UAElBF,MAAK,SAAAG,GACF,EAAKZ,SAAS,CAACtB,MAAMkC,S,+BAOrB,IAAD,OACDC,EAAYd,KAAKF,MAAMnB,MAAMoC,QAAO,SAAApC,GACtC,OAAOA,EAAMN,KAAK2C,cAAcC,SAAS,EAAKnB,MAAMQ,YAAYU,kBAGjE,OACC,yBAAKzC,UAAU,MACX,wBAAIA,UAAU,QAAd,eACA,kBAAC,EAAD,CAAQW,aAAcc,KAAKI,iBAC3B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAOzB,MAAOmC,W,GAlChBZ,aCEEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACR,kBAAC,EAAD,MACCC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3a056acf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Robot=({id,name,email})=>{\r\n    return(\r\n        <div className='br1 grow shadow-5 tc bg-green pa0 dib bw4 ma1 '>\r\n            <img alt='robot' src={`https://robohash.org/${id}?200Ã—200`}/>\r\n        \r\n            <div>\r\n             <h1>{name}</h1>\r\n             <p>{email}</p>\r\n\r\n        </div>\r\n    </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default Robot","import React from 'react';\r\nimport Robot from '../Componet/Robot';\r\n\r\nconst Cards=({robot}) =>{ \r\n    /*if(true){\r\n        throw new Error(\"There is n error\")\r\n    }*/\r\n    return(\r\n        <div>\r\n            {\r\n                robot.map((user,i)=>{\r\n                    return(\r\n                        <Robot  \r\n                            key={i} \r\n                            id={robot[i].id} \r\n                            name={robot[i].name} \r\n                            email={robot[i].email} />\r\n                    )  \r\n            \r\n                })\r\n            }\r\n        \r\n        </div>\r\n    )\r\n}\r\nexport default Cards","import React from 'react';\r\n\r\nconst Search=({searchFeild,searchChange})=>{\r\n    return(\r\n        <div className='pa1'>\r\n            <input type='search' \r\n                placeholder='Serach your Robot'\r\n                className='ba3 pa3 bg-light-blue'\r\n                onChange={searchChange}\r\n            ></input>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\n\r\nconst Scroll=(props)=>{\r\n    \r\n    return(\r\n        <div style={{overflow:'scroll',border:'1px solid',borderColor:'lightgreen'}}>\r\n            {props.children}\r\n        </div>\r\n    ) \r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n    constructor(props){\r\n        super();\r\n        this.state={\r\n            hasError:false\r\n        }\r\n\r\n    }   \r\n    componentDidCatch(){\r\n        this.setState({hasError: true})\r\n    }\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Ooops. There is some error;</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\nexport default ErrorBoundry","import React, { Component } from 'react';\r\nimport Cards from '../Componet/Cards';\r\n//import { rbt } from './rbt';\r\nimport Search from '../Componet/Search';\r\nimport './App.css'\r\nimport Scroll from '../Componet/Scroll';\r\nimport ErrorBoundry from '../Componet/ErrorBoundry'\r\n\r\n\r\n\r\nclass App extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            robot:[],\r\n            SearchFeild:''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n        .then(response=>{\r\n          return  response.json();\r\n        })\r\n        .then(users=>{\r\n            this.setState({robot:users})\r\n        })\r\n    }\r\n    onSerachChange=(event)=>{\r\n        this.setState({SearchFeild:event.target.value})\r\n        \r\n    }\r\n   render(){\r\n    const FilterRobot=this.state.robot.filter(robot =>{\r\n        return robot.name.toLowerCase().includes(this.state.SearchFeild.toLowerCase())\r\n        \r\n    })\r\n       return(\r\n        <div className='tc'>\r\n            <h1 className='font'>ROBO FRIEND</h1>\r\n            <Search searchChange={this.onSerachChange}/>\r\n            <Scroll>\r\n                <ErrorBoundry>\r\n                    <Cards robot={FilterRobot} />\r\n                    </ErrorBoundry>\r\n            </Scroll>\r\n        </div>\r\n        \r\n       )\r\n   }\r\n\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './Container/App'\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n <App />,\n  document.getElementById('root')\n  \n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}